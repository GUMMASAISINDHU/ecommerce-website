pipeline {
    agent any

    parameters {
        // Define Active Choice Parameter for branches
        activeChoiceParam(
            name: 'BRANCH',
            description: 'Select the branch',
            choiceType: 'SINGLE_SELECT',
            filterable: true,
            script: [
                $class: 'GroovyScript',
                script: [
                    classpath: [],
                    sandbox: true,
                    script: """
                        def gitRepo = 'https://github.com/GUMMASAISINDHU/ecommerce-website.git'
                        def branches = []
                        def proc = "git ls-remote --heads ${gitRepo}".execute()
                        proc.text.eachLine { line ->
                            def branch = line.split('/').last()
                            branches.add(branch)
                        }
                        return branches
                    """
                ]
            ]
        )
        // Define Active Choice Reactive Parameter for commits
        activeChoiceReactiveParam(
            name: 'COMMIT_ID',
            description: 'Select the commit ID',
            choiceType: 'SINGLE_SELECT',
            filterable: true,
            groovyScript: [
                classpath: [],
                fallbackScript: "return ['ERROR']",
                script: """
                    if (!BRANCH) {
                        return ['Select a branch first']
                    }
                    def gitRepo = 'https://github.com/GUMMASAISINDHU/ecommerce-website.git'
                    def branch = BRANCH
                    def commits = []
                    def fetchProc = "git fetch origin ${branch}".execute([], new File("/tmp/repo"))
                    fetchProc.waitFor()
                    def logProc = "git log origin/${branch} --pretty=format:'%H %s' -n 5".execute([], new File("/tmp/repo"))
                    logProc.text.eachLine { line ->
                        commits.add(line)
                    }
                    return commits
                """
            ]
        )
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    // Prepare the workspace for git operations
                    sh 'rm -rf /tmp/repo'
                    sh 'mkdir -p /tmp/repo'
                    dir('/tmp/repo') {
                        sh 'git init'
                        sh "git remote add origin https://github.com/GUMMASAISINDHU/ecommerce-website.git"
                    }
                }
            }
        }
        stage('Clone Repository') {
            steps {
                script {
                    // Clone the repository and checkout the specified branch
                    def gitRepo = 'https://github.com/GUMMASAISINDHU/ecommerce-website.git'
                    def branch = params.BRANCH
                    checkout([$class: 'GitSCM', branches: [[name: "*/${branch}"]], userRemoteConfigs: [[url: gitRepo]]])
                }
            }
        }
        stage('Checkout Specific Commit') {
            steps {
                script {
                    // Checkout the specific commit
                    def commitId = params.COMMIT_ID.split(' ')[0]
                    sh "git checkout ${commitId}"
                }
            }
        }
        stage('Run Pipeline') {
            steps {
                script {
                    // Add your pipeline steps here that should run on the specific commit
                    echo "Running pipeline on commit ${params.COMMIT_ID}"
                    // Example step
                    sh "echo 'Pipeline executed on commit: ${params.COMMIT_ID}'"
                }
            }
        }
    }
}
