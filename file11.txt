pipeline {
    agent any
    
    parameters {
        string(
            name: 'GIT_REPO',
            defaultValue: 'https://github.com/GUMMASAISINDHU/ecommerce-website.git',
            description: 'Input Git Repo (https) Url'
        )
        
        choice(
            name: 'BRANCH_NAME',
            choices: ['Loading...'], // Placeholder, will be dynamically populated
            description: 'Select Git Branch Name'
        )
        
        choice(
            name: 'COMMIT_ID',
            choices: ['Loading...'], // Placeholder, will be dynamically populated based on selected branch
            description: 'Select Commit ID'
        )
    }
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    // Populate Branches
                    def branches = getBranches(GIT_REPO)
                    BRANCH_NAME = branches[0] // Set default to first branch
                }
            }
        }
        stage('Fetch Commits') {
            when {
                expression {
                    return BRANCH_NAME != 'Loading...'
                }
            }
            steps {
                script {
                    // Populate Commit IDs based on selected branch
                    COMMIT_ID = getCommits(GIT_REPO, BRANCH_NAME)[0] // Set default to first commit
                }
            }
        }
        stage('Build') {
            steps {
                echo "Building branch ${BRANCH_NAME} at commit ${COMMIT_ID}"
                // Your build steps here
            }
        }
    }
}

def getBranches(repo) {
    def gitRepo = repo.tokenize('/')[3..-1].join('/')
    def branches = []
    def proc = "git ls-remote --heads https://github.com/${gitRepo}".execute()
    proc.waitFor()
    proc.in.eachLine { line ->
        def branch = line.split()[1].replaceAll('refs/heads/', '')
        branches << branch
    }
    return branches
}

def getCommits(repo, branch) {
    def gitRepo = repo.tokenize('/')[3..-1].join('/')
    def commits = []
    if (branch) {
        def proc = "git ls-remote https://github.com/${gitRepo} refs/heads/${branch}".execute()
        proc.waitFor()
        proc.in.eachLine { line ->
            def commitId = line.split()[0]
            commits << commitId
        }
    }
    return commits.take(5) // Get only the latest 5 commits
}
