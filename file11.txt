pipeline {
    agent any
 
    environment {
        // Define environment variables
        JAVA_HOME = "/usr/lib/jvm/java-11-openjdk-11.0.23.0.9-3.el9.x86_64"  // Path to Java 11
        MAVEN_HOME = "/usr/share/maven" // Path to Maven
    }
 
    parameters {
        // Define input parameters for the pipeline
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'uat', 'prod'],
            description: 'Select the target environment: dev, uat, or prod.'
        )
        choice(
            name: 'BRANCH',
            choices: ['master', 'development', 'feature branch'],
            description: 'Select the branch to build from: main, development, or feature branch.'
        )
    }
 
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the code...'
                // Checkout the selected branch
                checkout([$class: 'GitSCM', branches: [[name: "refs/heads/${params.BRANCH}"]],
                          doGenerateSubmoduleConfigurations: false,
                          extensions: [],
                          userRemoteConfigs: [[url: 'https://github.com/GUMMASAISINDHU/demo-java11.git']]])
            }
        }
 
        stage('Build and Test') {
            steps {
                echo "Building and testing the project for environment: ${params.ENVIRONMENT}..."
                sh "${MAVEN_HOME}/bin/mvn clean install"
                sh "${MAVEN_HOME}/bin/mvn test"
            }
        }
 
        stage('Deploy') {
            steps {
                echo "Deploying the project to ${params.ENVIRONMENT} environment..."
                // Add your deployment commands here. For example:
                sh "${MAVEN_HOME}/bin/mvn deploy -P${params.ENVIRONMENT}"
            }
        }
    }
 
    post {
        always {
            // This block runs at the end of the pipeline regardless of the outcome
            // Collect test reports (if tests were run)
            junit 'target/surefire-reports/**/*.xml' // Collect and report test results
 
            // Archive artifacts (if needed)
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
        }
 
        success {
            echo 'Pipeline completed successfully!'
        }
 
        failure {
            echo 'Pipeline failed.'
        }
    }
}
