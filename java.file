pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                // Fetch the latest commits from the repository
                sh 'git fetch'
                // Get the last 5 commits and their short hashes
                def lastFiveCommits = sh(
                    script: "git log -5 --pretty=format:'%h %s'",
                    returnStdout: true
                ).trim().split("\n")
                // Parse the list of commits to display to the user
                def commitChoices = lastFiveCommits.collect { line ->
                    def (commitId, commitMessage) = line.split(' ', 2)
                    return "${commitId} - ${commitMessage}"
                }
                // Fetching repository list from GitHub
                def repositoryList = sh(
                    script: """
                    curl -s -H 'Authorization: token YOUR_GITHUB_TOKEN' https://api.github.com/user/repos | grep '"full_name"' | awk -F': "' '{print \$2}' | awk -F'"' '{print \$1}'
                    """,
                    returnStdout: true
                ).trim().split("\n")
 
                // Prompt the user to select one of the last 5 commits
                def chosenCommit = input(
                    message: 'Please select a commit to run the pipeline on:',
                    parameters: [
                        [$class: 'ChoiceParameter',
                         choiceType: 'PT_SINGLE_SELECT',
                         description: 'Select a commit ID to build:',
                         name: 'commit',
                         choices: commitChoices.join('\n')
                        ],
                        [$class: 'ChoiceParameter',
                         choiceType: 'PT_SINGLE_SELECT',
                         description: 'Select a repository:',
                         name: 'repository',
                         choices: repositoryList.join('\n')
                        ]
                    ]
                )
                // Extract the commit ID from the chosen option
                def commitId = chosenCommit.split(' ')[0]
                def repository = chosenCommit.split(' ')[1]
                // Checkout the chosen commit
                sh "git checkout ${commitId}"
                sh "git remote set-url origin https://github.com/${repository}.git"
            }
        }
        stage ('Build') {
            steps {
                sh '''
                mvn package
                '''
            }
            post {
                success {
                    echo "Archiving the Artifacts"
                    archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }
        stage ('Deploy to tomcat server') {
            steps {
                deploy adapters: [tomcat7(credentialsId: 53f6d854-6d94-49d0-8b3b-a1ad7ce25f4a'', path: '', url: 'http://54.205.238.236:8081/')], contextPath: null, war: '**/*.war'
            }
        }
    }
}
